name: CI

on:
  push:
    branches: [main, stable]
  pull_request:
    branches: [main, stable]

concurrency:
  group: '${{ github.head_ref || github.ref }}-${{ github.workflow }}'
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: '1.8.3'
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install
      - name: Lint Python
        run: make lint-py
      - name: Lint HTML
        run: make lint-html
  compile_static:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/.nvmrc') }}-${{ hashFiles('**/package-lock.json') }}
      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      - run: npm run build:prod
      - uses: actions/upload-artifact@v4
        with:
          name: static
          path: ons_alpha/static_compiled/
  test-python:
    runs-on: ubuntu-latest
    needs: compile_static

    env:
      DJANGO_SETTINGS_MODULE: ons_alpha.settings.test
      DATABASE_URL: postgres://postgres:postgres@localhost/postgres # pragma: allowlist secret
      ENABLE_DJANGO_DEFENDER: 'false'
      POSTGRES_HOST_AUTH_METHOD: trust
      SECRET_KEY: fake_secret_key_to_run_tests # pragma: allowlist secret

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - uses: actions/download-artifact@v4
        with:
          name: static
          path: ons_alpha/static_compiled/
      - uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: '1.8.3'
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install
          poetry run coverage erase
      - name: Fetch Design System templates
        run: make load-design-system-templates
      - name: collectstatic
        run: poetry run ./manage.py collectstatic --verbosity 0 --noinput --clear
      - name: System checks
        run: poetry run ./manage.py check
      - name: Check for missing migrations
        run: poetry run ./manage.py makemigrations --check --noinput
      - name: Create cache table
        run: poetry run ./manage.py createcachetable
      - name: Test
        run: poetry run coverage run ./manage.py test --parallel
      - name: Report coverage
        run: poetry run coverage combine && poetry run coverage report

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: '1.8.3'
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install
      - name: Build documentation
        run: poetry run mkdocs build

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        run: docker build -t ons_alpha .
