name: CI

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  lint_py:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: 1.7.1
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install
      - name: ruff check
        run: ruff check .
      - name: ruff format
        run: ruff format --check .
      - name: djhtml
        run: find ons_alpha/ -name '*.html' | xargs djhtml --check

  lint_js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/.nvmrc') }}-${{ hashFiles('**/package-lock.json') }}
      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      - name: Lint JS
        run: npm run lint:js
      - name: Lint CSS
        run: npm run lint:css
      - name: Lint Format
        run: npm run lint:format

  test_js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/.nvmrc') }}-${{ hashFiles('**/package-lock.json') }}
      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      - run: npm run test

  compile_static:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/.nvmrc') }}-${{ hashFiles('**/package-lock.json') }}
      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      - run: npm run build:prod
      - uses: actions/upload-artifact@v4
        with:
          name: static
          path: ons_alpha/static_compiled/

  test_python:
    needs: compile_static
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: ons_alpha.settings.test
      DATABASE_URL: postgres://postgres:postgres@localhost/postgres # pragma: allowlist secret
      ENABLE_DJANGO_DEFENDER: 'false'
      POSTGRES_HOST_AUTH_METHOD: trust
      RECAPTCHA_PRIVATE_KEY: 'dummy-key-value'
      RECAPTCHA_PUBLIC_KEY: 'dummy-key-value'
      SECRET_KEY: fake_secret_key_to_run_tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: 1.7.1
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install
          coverage erase
      - uses: actions/download-artifact@v4
        with:
          name: static
          path: ons_alpha/static_compiled/
      - name: collectstatic
        run: ./manage.py collectstatic --verbosity 0 --noinput --clear
      - name: System checks
        run: ./manage.py check
      - name: Check for missing migrations
        run: ./manage.py makemigrations --check --noinput
      - name: Create cache table
        run: ./manage.py createcachetable
      - name: Test
        run: coverage run ./manage.py test --parallel
      - name: Report coverage
        run: coverage combine && coverage report

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: 1.7.1
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install
      - name: Build documentation
        run: mkdocs build
