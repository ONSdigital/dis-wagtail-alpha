[tool.poetry]
name = "ons_alpha"
version = "0.1.0"
description = "ONS Wagtail Alpha"
authors = ["ONSdigital"]

[tool.poetry.dependencies]
python = "~3.12"
django = "~4.2"
wagtail = "~6.2.0"
dj-database-url = "~2.2.0"
django-basic-auth-ip-whitelist = "~0.6"
django-crispy-forms = "^2.1"
django-csp = "~3.8"
django-defender = "~0.9.8"
django-extensions = "~3.2"
django-redis = "~5.4"
django-storages = { version = "~1.14", extras = ["s3"] }
gunicorn = "~22.0"
psycopg2 = "~2.9"
sentry-sdk = "~2.12"
tbxforms = "2.0.0"
wagtailmath = {git = "https://github.com/wagtail-nest/wagtail-polymath.git", rev = "0f22366"}
wagtail-storages = "~1.1.0"
wagtail-2fa = { git = "https://github.com/torchbox-forks/wagtail-2fa.git" }
whitenoise = "~6.7"
boto3 = "^1.34.55"
django-jinja = "^2.11.0"
wagtailcharts = "^0.5.0"
wagtail-font-awesome-svg = "^1.0.1"
apscheduler = "^3.10.4"
slack-sdk = "^3.31.0"
queryish = "^0.2"

[tool.poetry.group.dev.dependencies]
Werkzeug = "~3.0.3"
coverage = "^7.5.4"
detect-secrets = "~1.4.0"
django-debug-toolbar = "^4.4.2"
dslr = "^0.4.0"
mkdocs = "1.3.0"
mkdocs-material = "8.2.8"
pymdown-extensions = "9.3"
wagtail-factories = "^4.2.1"
pudb = "^2024.1"
tblib = "^3.0.0"
pre-commit = "~3.7.1"
ruff = "0.5.5" # keep version in sync with .pre-commit-config.toml
pylint = "^3.2.4"
pylint-django = "^2.0.0"
black = "^24.4.2"  # keep version in sync with .pre-commit-config.toml
djhtml = "~3.0.6"
setuptools = "^70.2.0"
honcho = "^1.1.0"

[build-system]
requires = ["poetry>=1,<2"]
build-backend = "poetry.masonry.api"

[tool.black]
line_length = 120
target-version = ['py312']
exclude = '''
    /(
        .+/migrations
      | venv
      | \.venv
      | \.git
    )/
'''

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    # Enabling ALL is not recommended it will implicitly enable new rules after upgrade.
    # "ALL",

    # Ruff rules: https://docs.astral.sh/ruff/rules/

    "E",      # pycodestyle erros
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "I",      # isort
    "DJ",     # flake8-django
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "C4",     # flake8-comprehensions
    "S",      # flake8-bandit
    "C90",    # mccabe
    "RUF",    # Ruff specific rules
]

ignore = [
    # Disable line length check as it is handled by black
    # :TODO: Remove E501 when ruff supports all black rules
    "E501",
    # indentation contains tabs
    "W191",
    # Ruff checks
    "RUF005",
    "RUF012",
    "RUF003"
]

[tool.ruff.lint.per-file-ignores]
"fabfile.py" = ["S603", "S607", "T201", "S101", "S608"]
"ons_alpha/settings/*.py" = ["SIM105", "S105"]
"ons_alpha/utils/management/commands/__init__.py" = ["PGH003"]
"ons_alpha/*/tests/**" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["ons_alpha"]
lines-between-types = 1
lines-after-imports = 2

[tool.coverage.run]
source = "."
omit = [
   "manage.py",
   "*venv/*",
   "*node_modules*",
   "*migrations*",
]

[tool.coverage.report]
show_missing = true
